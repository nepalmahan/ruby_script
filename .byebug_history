exit
continue
exit
continue
column_header
exit
generated_csv = ch.generate_csv(email)
email
ch = CsvGenerator.new
all_emails
continue
response
exit
continue
my_array << from_email
my_array = []
from_email = message.from
message = data
data
exit
ch = CsvGenerator.new
message.from
message
exit
CsvGenerator.new
ch = CsvGenerator.new
exit
ch = CsvGenerator.new
whereami
message.from
message
exit
my_array
exit
my_array.flatten
my_array
exit
 csv << ["from_email"]
from_email
csv
data
message
from_email
generate_csv(from_email)
exit
generate_csv(from_email)
exit
generate_csv(from_email)
from_email
exit
generate_csv(from_email)
from_email
generate_csv = CsvApi.new
from_email = message.from
        return from_email
        generate_csv.export_csv(from_email)
        generate_csv = CsvApi.new
 from_email = message.from
message.from
from_email
whereami
continue
the_message_attachments = []
the_message_text = message.body.decoded
the_message_html = message.body.decoded
message.from
message.body.decoded.from
message.body.decoded
message.from
message.body.from
message.body
message
whereami
exit
message.body
message.from
message
exit
message.from
exit
message.from
message
exit
!!!!!!!!!
exit
!!!
exit
message.from
message
exit
cd ..
message
message.body.decoded
message.count
exit
message.count
exit
continue
exit
bundle install
continue
message.from
continue
ENV['GMAIL_PASSWORD']
ENV['GMAIL_USERNAME']
message.from
message.body.decoded
message.body.decode
message.body
message
continue
exit
clear
the_message_html = message.html_part.body.decoded
message.count
message.html_part
message.html_part.body
message.body
message
params
exit
clear
unparsed_page
Mailman::Application.run do
Mailman::Application.run do;
Mailman::Application.run do;;
Mailman::Application.run do
